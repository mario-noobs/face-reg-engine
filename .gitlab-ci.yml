image: docker:latest  # this sets default image for jobs

services:
  - docker:dind


variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_REPO: mariobui
  DOCKER_IMAGE: face-engine-backend
  DOCKER_IMAGE_VERSION: v0.5
  SPRING_PROFILES_ACTIVE: gitlab-ci
  PATH_TO_PROJECT: /root/face-reg-engine/docker-compose.yml
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/face-engine/${CI_COMMIT_TAG}"

stages:
  - test
  - build
  - package
  - upload
  - release
  - deploy

#gradle-test:  # Test job for Gradle
#  image: gradle:jdk17  # Using Gradle Docker image
#  stage: test
#  script:
#    - ./gradlew clean test  # Run Gradle tests
#  variables:
#    SPRING_DATASOURCE_URL: $DB_URL
#    SPRING_DATASOURCE_USERNAME: $DB_USERNAME
#    SPRING_DATASOURCE_PASSWORD: $DB_PASSWORD
#  artifacts:
#    paths:
#      - build/test-results/test/  # Ensure this path matches your project structure
#      - build/reports/tests/       # Ensure this path matches your project structure

gradle-build:
  image: gradle:jdk17  # Using Gradle Docker image
  stage: build
  script:
    - ./gradlew clean bootJar  # Run Gradle build
  variables:
    SPRING_DATASOURCE_URL: $DB_URL
    SPRING_DATASOURCE_USERNAME: $DB_USERNAME
    SPRING_DATASOURCE_PASSWORD: $DB_PASSWORD
  artifacts:
    paths:
      - build/libs/*.jar  # Ensure this path matches where your JAR files are located

#docker-build:
#  stage: package
#  script:
#    - unset DOCKER_HOST
#    - docker info  # Check Docker connection
#    - docker build -t $DOCKER_REPO/$DOCKER_IMAGE:latest .  # Tagging the latest version correctly
#    - docker tag $DOCKER_REPO/$DOCKER_IMAGE:latest $DOCKER_REPO/$DOCKER_IMAGE:$DOCKER_IMAGE_VERSION  # Tag with version
#    - echo $DOCKER_SECRET | docker login -u $DOCKER_USER --password-stdin  # Securely logging in to Docker
#    - docker push $DOCKER_REPO/$DOCKER_IMAGE:$DOCKER_IMAGE_VERSION  # Push the image with version

upload:
  stage: upload
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/libs/face-engine-release.jar ${PACKAGE_REGISTRY_URL}/face-engine-release-${CI_COMMIT_TAG}.jar'

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - 'release-cli create --name "face-engine-release-${CI_COMMIT_TAG}.jar" --tag-name $CI_COMMIT_TAG --assets-link "{\"name\":\"face-engine-release-${CI_COMMIT_TAG}.jar\", \"url\":\"${PACKAGE_REGISTRY_URL}/face-engine-release-${CI_COMMIT_TAG}.jar\"}"'

#docker-compose-deploy:
#  stage: deploy
#  before_script:
#    - chmod 600 $SSH_KEY
#  script:
#    - >
#      ssh -o StrictHostKeyChecking=no -i $SSH_KEY gitlab@198.7.120.11
#      "
#      echo $SUDO_PASSWORD | sudo -S su
#      sudo su
#      sudo docker compose -f $PATH_TO_PROJECT down;
#      sudo docker compose -f $PATH_TO_PROJECT up -d;
#      sudo docker image prune -f;"