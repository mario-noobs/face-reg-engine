image: openjdk:17
variables:
  DOCKER_DRIVER: overlay
  DOCKER_REPO: mario
  DOCKER_IMAGE: face-engine-backend
  DOCKER_IMAGE_VERSION: v0.5
  SPRING_PROFILES_ACTIVE: gitlab-ci
  DB_URL: $DB_URL
  DB_USERNAME: $DB_USERNAME
  DB_PASSWORD: $DB_PASSWORD

stages:
  - test
  - build
  - package
  - deploy

gradle-test:  # Test job for Gradle
  image: gradle:jdk17  # Using Gradle Docker image
  stage: test
  script:
    - echo "DB_URL: $DB_URL"
    - echo "DB_USERNAME: $DB_USERNAME"
    - ./gradlew clean test  # Run Gradle tests
  variables:
    SPRING_DATASOURCE_URL: ${DB_URL}
    SPRING_DATASOURCE_USERNAME: ${DB_USERNAME}
    SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
  artifacts:
    paths:
      - build/test-results/test/  # Ensure this path matches your project structure
      - build/reports/tests/       # Ensure this path matches your project structure

gradle-build:
  image: gradle:jdk17  # Using Gradle Docker image
  stage: build
  script:
    - ./gradlew clean bootJar  # Run Gradle build
  variables:
    SPRING_DATASOURCE_URL: ${DB_URL}
    SPRING_DATASOURCE_USERNAME: ${DB_USERNAME}
    SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
  artifacts:
    paths:
      - build/libs/*.jar  # Ensure this path matches where your JAR files are located

docker-build:
  stage: package
  script:
    - docker build -t $DOCKER_REPO/$DOCKER_IMAGE:latest .  # Tagging the latest version correctly
    - docker tag $DOCKER_REPO/$DOCKER_IMAGE:latest $DOCKER_REPO/$DOCKER_IMAGE:$DOCKER_IMAGE_VERSION  # Tag with version
    - echo $DOCKER_SECRET | docker login -u $DOCKER_USER --password-stdin  # Securely logging in to Docker
    - docker push $DOCKER_REPO/$DOCKER_IMAGE:$DOCKER_IMAGE_VERSION  # Push the image with version
